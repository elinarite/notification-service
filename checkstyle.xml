<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!--
    Checkstyle configuration that checks the Google coding conventions from Google Java Style
    that can be found at https://google.github.io/styleguide/javaguide.html

    Checkstyle is very configurable. Be sure to read the documentation at
    http://checkstyle.org (or in your downloaded distribution).

    To completely disable a check, just comment it out or delete it from the file.
    To suppress certain violations please review suppression filters.

    Authors: Max Vetrenko, Ruslan Diachenko, Roman Ivanov.
 -->
<!--Это главный модуль Checkstyle. Все остальные модули и проверки должны находиться внутри этого модуля.-->
<module name="Checker">
<!--    Этот модуль позволяет игнорировать предупреждения Checkstyle, помеченные аннотацией @SuppressWarnings.-->
    <module name="SuppressWarningsFilter"/>
<!--Указывает на кодировку исходных файлов. В данном случае это "UTF-8".-->
    <property name="charset" value="UTF-8"/>
<!--Уровень серьезности для предупреждений. Здесь это "warning".-->
    <property name="severity" value="warning"/>
<!--Определяет расширения файлов, которые должны проверяться. В данном случае это файлы .java, .properties и .xml.-->
    <property name="fileExtensions" value="java, properties, xml"/>
    <!-- Excludes all 'module-info.java' files              -->
    <!-- See https://checkstyle.org/filefilters/index.html -->
<!--    Этот модуль исключает определенные файлы из проверки.-->
    <module name="BeforeExecutionExclusionFileFilter">
<!--        Указывает на то, что все файлы с именем module-info.java будут исключены из проверки.-->
        <property name="fileNamePattern" value="module\-info\.java$"/>
    </module>
    <!-- https://checkstyle.org/filters/suppressionfilter.html -->
<!--    Позволяет игнорировать или отключать определенные проверки с использованием файла checkstyle-suppressions.xml.-->
    <module name="SuppressionFilter">
        <property name="file" value="${org.checkstyle.google.suppressionfilter.config}"
                  default="checkstyle-suppressions.xml" />
        <property name="optional" value="true"/>
    </module>

    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.org/checks/whitespace/index.html -->
<!--    Проверяет, что в исходном файле нет символов табуляции.-->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>
<!--    Устанавливает максимальную длину строки в исходном коде.-->
    <module name="LineLength">
        <property name="fileExtensions" value="java"/>
        <property name="max" value="100"/>
        <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
    </module>
<!--Этот модуль позволяет применять различные проверки к абстрактному синтаксическому дереву (AST) исходного кода.-->
    <module name="TreeWalker">
<!--        Проверяет, что имя внешнего типа (класса, интерфейса, перечисления или аннотации) совпадает с именем файла.-->
        <module name="OuterTypeFilename"/>
<!--        Проверяет наличие недопустимых токенов или строк в исходном коде.-->
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format"
                      value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message"
                      value="Consider using special escape sequence instead of octal value or Unicode escaped value."/>
        </module>
<!--        Проверяет, чтобы в исходном коде не использовались экранированные юникод-символы.-->
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowByTailComment" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>
<!--        Проверяет, чтобы в исходном коде не использовался импорт со звездочкой (*).-->
        <module name="AvoidStarImport"/>
<!--        Проверяет, что в каждом исходном файле находится только один верхний уровень класса.-->
        <module name="OneTopLevelClass"/>
<!--        Проверяет, чтобы определенные токены (в данном случае PACKAGE_DEF, IMPORT, STATIC_IMPORT) не разбивались на несколько строк.-->
        <module name="NoLineWrap">
            <property name="tokens" value="PACKAGE_DEF, IMPORT, STATIC_IMPORT"/>
        </module>
<!--        Этот модуль проверяет наличие пустых блоков кода.-->
        <module name="EmptyBlock">
<!--            Это свойство указывает, что пустой блок должен быть указан текстом.-->
            <property name="option" value="TEXT"/>
<!--            Это свойство указывает, на каких токенах должна выполняться проверка. Здесь перечислены различные ключевые слова языка программирования, например, TRY, FINALLY, IF и так далее.-->
            <property name="tokens"
                      value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
        </module>
<!--        Здесь перечислены токены, для которых нужна эта проверка, такие как DO, ELSE, FOR и так далее.-->
        <module name="NeedBraces">
            <property name="tokens"
                      value="LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_IF, LITERAL_WHILE"/>
        </module>
<!--        Этот модуль проверяет расположение левой фигурной скобки относительно других структурных элементов кода.-->
        <module name="LeftCurly">
<!--            Снова перечислены токены, для которых будет проводиться данная проверка.-->
            <property name="tokens"
                      value="ANNOTATION_DEF, CLASS_DEF, CTOR_DEF, ENUM_CONSTANT_DEF, ENUM_DEF,
                    INTERFACE_DEF, LAMBDA, LITERAL_CASE, LITERAL_CATCH, LITERAL_DEFAULT,
                    LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF,
                    LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, METHOD_DEF,
                    OBJBLOCK, STATIC_INIT, RECORD_DEF, COMPACT_CTOR_DEF"/>
        </module>
<!--        Этот модуль проверяет расположение правой фигурной скобки.-->
        <module name="RightCurly">
            <property name="id" value="RightCurlySame"/>
<!--            Перечислены токены для данной проверки.-->
            <property name="tokens"
                      value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE,
                    LITERAL_DO"/>
        </module>
<!--        Это еще одна настройка модуля для проверки расположения правой фигурной скобки.-->
        <module name="RightCurly">
            <property name="id" value="RightCurlyAlone"/>
<!--            Это свойство указывает, что правая фигурная скобка должна находиться на отдельной строке.-->
            <property name="option" value="alone"/>
<!--            перечислены токены, для которых будет проводиться данная проверка.-->
            <property name="tokens"
                      value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT,
                    INSTANCE_INIT, ANNOTATION_DEF, ENUM_DEF, INTERFACE_DEF, RECORD_DEF,
                    COMPACT_CTOR_DEF"/>
        </module>
<!--        Этот модуль позволяет подавлять (игнорировать) определенные правила на основе XPath-запроса.-->
        <module name="SuppressionXpathSingleFilter">
            <!-- suppresion is required till https://github.com/checkstyle/checkstyle/issues/7541 -->
            <property name="id" value="RightCurlyAlone"/>
<!--            XPath-запрос, который определяет, какие конкретные случаи следует подавить.-->
            <property name="query" value="//RCURLY[parent::SLIST[count(./*)=1]
                                     or preceding-sibling::*[last()][self::LCURLY]]"/>
        </module>
<!--        Этот модуль проверяет наличие пробельного символа после указанных токенов.-->
        <module name="WhitespaceAfter">
<!--            Токены, для которых следует проверять пробелы после них. Например, после запятой или ключевого слова IF.-->
            <property name="tokens"
                      value="COMMA, SEMI, TYPECAST, LITERAL_IF, LITERAL_ELSE, LITERAL_RETURN,
                    LITERAL_WHILE, LITERAL_DO, LITERAL_FOR, LITERAL_FINALLY, DO_WHILE, ELLIPSIS,
                    LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_CATCH, LAMBDA,
                    LITERAL_YIELD, LITERAL_CASE"/>
        </module>
<!--        Этот модуль проверяет наличие пробелов вокруг указанных токенов.-->
        <module name="WhitespaceAround">
<!--            Эти свойства позволяют игнорировать отсутствие пробелов в пустых конструкторах, лямбдах, методах, типах и циклах.
Значение "true" говорит о том, что пробелы в пустых блоках допускаются.-->
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyLambdas" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
<!--            Это свойство указывает, следует ли игнорировать двоеточие в улучшенном цикле for-each. Значение "false"
 говорит о том, что двоеточие в таких циклах должно соответствовать правилам остальных токенов.-->
            <property name="ignoreEnhancedForColon" value="false"/>
<!--            Токены, для которых следует проверять пробелы вокруг них.-->
            <property name="tokens"
                      value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR,
                    BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, DO_WHILE, EQUAL, GE, GT, LAMBDA, LAND,
                    LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY,
                    LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SWITCH, LITERAL_SYNCHRONIZED,
                    LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN,
                    NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR,
                    SR_ASSIGN, STAR, STAR_ASSIGN, LITERAL_ASSERT, TYPE_EXTENSION_AND"/>
<!--            Сообщение об ошибке, которое будет отображаться, если после токена отсутствует пробельный символ.-->
            <message key="ws.notFollowed"
                     value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks
               may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
<!--            Сообщение об ошибке, которое будет отображаться, если перед токеном отсутствует пробельный символ.-->
            <message key="ws.notPreceded"
                     value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>
<!--        Этот модуль проверяет, чтобы на одной строке было не более одного оператора.-->
        <module name="OneStatementPerLine"/>
<!--        Этот модуль проверяет, чтобы каждое объявление переменной было на новой строке.-->
        <module name="MultipleVariableDeclarations"/>
<!--        Проверяет стиль объявления массива, чтобы он соответствовал стандарту Java (например, int[] array; а не int array[];).-->
        <module name="ArrayTypeStyle"/>
<!--        Этот модуль проверяет наличие блока default в операторе switch.-->
        <module name="MissingSwitchDefault"/>
<!--        Проверяет наличие комментария fall-through в операторе switch там, где управление передается из одного случая в другой без break.-->
        <module name="FallThrough"/>
<!--        Проверяет, что длинные литералы записаны в верхнем регистре (например, 1L а не 1l).-->
        <module name="UpperEll"/>
<!--        Проверяет, что порядок модификаторов (public, private, static и т. д.) соответствует рекомендуемому.-->
        <module name="ModifierOrder"/>
<!--        Этот модуль проверяет наличие пустой строки между определениями (например, между методами или классами).-->
        <module name="EmptyLineSeparator">
<!--            Токены, для которых следует проверять наличие пустой строки.-->
            <property name="tokens"
                      value="PACKAGE_DEF, IMPORT, STATIC_IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF,
                    STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF, VARIABLE_DEF, RECORD_DEF,
                    COMPACT_CTOR_DEF"/>
<!--            Это свойство позволяет не использовать пустую строку между полями класса.-->
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
        </module>
<!--        Этот модуль проверяет, как разделители (например, точки или запятые) оборачиваются на новую строку.-->
        <module name="SeparatorWrap">
<!--            Уникальный идентификатор для этой конфигурации.-->
            <property name="id" value="SeparatorWrapDot"/>
<!--            Токен, для которого следует проверять обертку. В этом случае это точка.-->
            <property name="tokens" value="DOT"/>
<!--            Говорит о том, что точка должна быть на новой строке, если разделение происходит.-->
            <property name="option" value="nl"/>
        </module>
<!--        Этот модуль проверяет, как разделители (например, запятые, многоточия) оборачиваются на новую строку или остаются на той же строке.-->
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapComma"/>
            <!--            токен (запятая) для проверки.-->
            <property name="tokens" value="COMMA"/>
<!--            разделитель должен быть в конце строки.-->
            <property name="option" value="EOL"/>
        </module>
<!--        для многоточия (ELLIPSIS). Комментарий уточняет, что стиль оборачивания определен так, пока не будет решен указанный issue.-->
        <module name="SeparatorWrap">
            <!-- ELLIPSIS is EOL until https://github.com/google/styleguide/issues/259 -->
            <property name="id" value="SeparatorWrapEllipsis"/>
            <property name="tokens" value="ELLIPSIS"/>
            <property name="option" value="EOL"/>
        </module>
<!--         для ARRAY_DECLARATOR. Это проверка того, как объявления массивов разделяются по строкам. Аналогично, стиль определен в соответствии с указанным issue.-->
        <module name="SeparatorWrap">
            <!-- ARRAY_DECLARATOR is EOL until https://github.com/google/styleguide/issues/258 -->
            <property name="id" value="SeparatorWrapArrayDeclarator"/>
            <property name="tokens" value="ARRAY_DECLARATOR"/>
            <property name="option" value="EOL"/>
        </module>
<!--        Этот токен проверяет, как методы ссылок оборачиваются на новую строку.-->
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapMethodRef"/>
            <property name="tokens" value="METHOD_REF"/>
            <property name="option" value="nl"/>
        </module>
<!--        Этот модуль проверяет имена пакетов.-->
        <module name="PackageName">
<!--            регулярное выражение, которому должно соответствовать имя пакета. Оно говорит о том, что имя пакета должно начинаться с маленькой буквы и может содержать точк-->
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
<!--             пользовательское сообщение об ошибке, которое будет показано, если имя пакета не соответствует шаблону.-->
            <message key="name.invalidPattern"
                     value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>
<!--        Этот модуль проверяет имена типов (классы, интерфейсы и т.д.).-->
        <module name="TypeName">
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF,
                    ANNOTATION_DEF, RECORD_DEF"/>
<!--            сообщение об ошибке, показанное, если имя типа не соответствует шаблону.-->
            <message key="name.invalidPattern"
                     value="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>
<!--        Этот модуль проверяет имена членов класса.-->
        <module name="MemberName">
<!--            регулярное выражение, которому должно соответствовать имя члена класса. Оно говорит о том, что имя должно начинаться с маленькой буквы
и может содержать как заглавные, так и строчные буквы и цифры.-->
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
<!--            сообщение об ошибке, показанное, если имя члена класса не соответствует шаблону.-->
            <message key="name.invalidPattern"
                     value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>
<!--        Этот модуль проверяет имена параметров на соответствие заданному шаблону. Имена параметров должны соответствовать регулярному выражению ^[a-z]([a-z0-9][a-zA-Z0-9]*)?$.-->
        <module name="ParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
<!--        но применяется к именам параметров лямбда-функций.-->
        <module name="LambdaParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Lambda parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
<!--        Проверяет имена параметров в блоке catch на соответствие заданному шаблону.-->
        <module name="CatchParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
<!--        Этот модуль проверяет имена локальных переменных.-->
        <module name="LocalVariableName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
<!--        Проверяет имена переменных паттерна.-->
        <module name="PatternVariableName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Pattern variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
<!--        Проверяет имена параметров типа в классах.-->
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>
<!--        Проверяет имена компонентов записи.-->
        <module name="RecordComponentName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Record component name ''{0}'' must match pattern ''{1}''."/>
        </module>
<!--        Проверяет имена параметров типа в записях.-->
        <module name="RecordTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Record type name ''{0}'' must match pattern ''{1}''."/>
        </module>
<!--         Проверяет имена параметров типа в методах.-->
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>
<!--        Проверяет имена параметров типа в интерфейсах.-->
        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Interface type name ''{0}'' must match pattern ''{1}''."/>
        </module>
<!--        Запрещает использование финализаторов.-->
        <module name="NoFinalizer"/>
<!--        Проверяет пробелы вокруг угловых скобок в обобщенных типах.-->
        <module name="GenericWhitespace">
            <message key="ws.followed"
                     value="GenericWhitespace ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded"
                     value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
            <message key="ws.illegalFollow"
                     value="GenericWhitespace ''{0}'' should followed by whitespace."/>
            <message key="ws.notPreceded"
                     value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>
<!--      Устанавливает правила отступов.-->
        <module name="Indentation">
            <property name="basicOffset" value="2"/>
            <property name="braceAdjustment" value="2"/>
            <property name="caseIndent" value="2"/>
            <property name="throwsIndent" value="4"/>
            <property name="lineWrappingIndentation" value="4"/>
            <property name="arrayInitIndent" value="2"/>
        </module>
<!--        Проверяет, чтобы имена не содержали аббревиатур, превышающих заданную длину.-->
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviationLength" value="0"/>
            <property name="tokens"
                      value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF, ANNOTATION_FIELD_DEF,
                    PARAMETER_DEF, VARIABLE_DEF, METHOD_DEF, PATTERN_VARIABLE_DEF, RECORD_DEF,
                    RECORD_COMPONENT_DEF"/>
        </module>
<!--        Гарантирует отсутствие пробелов перед двоеточием в case и default.-->
        <module name="NoWhitespaceBeforeCaseDefaultColon"/>
<!--        Проверяет порядок перегруженных методов.-->
        <module name="OverloadMethodsDeclarationOrder"/>
<!--        Проверяет расстояние между объявлением переменной и её первым использованием.-->
        <module name="VariableDeclarationUsageDistance"/>
<!--        Устанавливает порядок импорта.-->
        <module name="CustomImportOrder">
            <property name="sortImportsInGroupAlphabetically" value="true"/>
            <property name="separateLineBetweenGroups" value="true"/>
            <property name="customImportOrderRules" value="STATIC###THIRD_PARTY_PACKAGE"/>
            <property name="tokens" value="IMPORT, STATIC_IMPORT, PACKAGE_DEF"/>
        </module>
<!--        Проверяет расположение и отступы вокруг параметров метода.-->
        <module name="MethodParamPad">
            <property name="tokens"
                      value="CTOR_DEF, LITERAL_NEW, METHOD_CALL, METHOD_DEF,
                    SUPER_CTOR_CALL, ENUM_CONSTANT_DEF, RECORD_DEF"/>
        </module>
<!--        Убеждается, что перед определенными токенами нет пробелов.-->
        <module name="NoWhitespaceBefore">
            <property name="tokens"
                      value="COMMA, SEMI, POST_INC, POST_DEC, DOT,
                    LABELED_STAT, METHOD_REF"/>
            <property name="allowLineBreaks" value="true"/>
        </module>
<!--        Проверяет отступы вокруг скобок.-->
        <module name="ParenPad">
            <property name="tokens"
                      value="ANNOTATION, ANNOTATION_FIELD_DEF, CTOR_CALL, CTOR_DEF, DOT, ENUM_CONSTANT_DEF,
                    EXPR, LITERAL_CATCH, LITERAL_DO, LITERAL_FOR, LITERAL_IF, LITERAL_NEW,
                    LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_WHILE, METHOD_CALL,
                    METHOD_DEF, QUESTION, RESOURCE_SPECIFICATION, SUPER_CTOR_CALL, LAMBDA,
                    RECORD_DEF"/>
        </module>
<!--        Проверяет, как операторы переносятся на следующую строку.-->
        <module name="OperatorWrap">
            <property name="option" value="NL"/>
            <property name="tokens"
                      value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR,
                    LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF,
                    TYPE_EXTENSION_AND "/>
        </module>
<!--        Устанавливает местоположение аннотаций.-->
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationMostCases"/>
            <property name="tokens"
                      value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF,
                      RECORD_DEF, COMPACT_CTOR_DEF"/>
        </module>
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationVariables"/>
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>
<!--         Гарантирует, что у каждой аннотации есть описание.-->
        <module name="NonEmptyAtclauseDescription"/>
<!--         Проверяет позицию Javadoc комментариев.-->
        <module name="InvalidJavadocPosition"/>
<!--         Проверяет отступы в Javadoc.-->
        <module name="JavadocTagContinuationIndentation"/>
<!--        Проверяет содержание первой строки Javadoc.-->
        <module name="SummaryJavadoc">
            <property name="forbiddenSummaryFragments"
                      value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
        </module>
<!--        Проверяет форматирование абзацев в Javadoc.-->
        <module name="JavadocParagraph"/>
<!--        Требует пустую строку перед группой тегов в Javadoc.-->
        <module name="RequireEmptyLineBeforeBlockTagGroup"/>
<!--         Устанавливает порядок тегов в Javadoc.-->
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
            <property name="target"
                      value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>
<!--        Устанавливает правила для Javadoc комментариев методов.-->
        <module name="JavadocMethod">
            <property name="accessModifiers" value="public"/>
            <property name="allowMissingParamTags" value="true"/>
            <property name="allowMissingReturnTag" value="true"/>
            <property name="allowedAnnotations" value="Override, Test"/>
            <property name="tokens" value="METHOD_DEF, CTOR_DEF, ANNOTATION_FIELD_DEF, COMPACT_CTOR_DEF"/>
        </module>
<!--        Проверяет наличие Javadoc у методов.-->
        <module name="MissingJavadocMethod">
            <property name="scope" value="public"/>
            <property name="minLineCount" value="2"/>
            <property name="allowedAnnotations" value="Override, Test"/>
            <property name="tokens" value="METHOD_DEF, CTOR_DEF, ANNOTATION_FIELD_DEF,
                                   COMPACT_CTOR_DEF"/>
        </module>
<!--        Проверяет наличие Javadoc у типов.-->
        <module name="MissingJavadocType">
            <property name="scope" value="protected"/>
            <property name="tokens"
                      value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF,
                      RECORD_DEF, ANNOTATION_DEF"/>
            <property name="excludeScope" value="nothing"/>
        </module>
<!--        Проверяет имена методов на соответствие заданному шаблону.-->
        <module name="MethodName">
            <property name="format" value="^[a-z][a-z0-9]\w*$"/>
            <message key="name.invalidPattern"
                     value="Method name ''{0}'' must match pattern ''{1}''."/>
        </module>
<!--         Гарантирует, что Javadoc комментарий занимает одну строку.-->
        <module name="SingleLineJavadoc"/>
<!--        Проверяет пустые блоки catch.-->
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected"/>
        </module>
<!--         Проверяет отступы комментариев.-->
        <module name="CommentsIndentation">
            <property name="tokens" value="SINGLE_LINE_COMMENT, BLOCK_COMMENT_BEGIN"/>
        </module>
        <!-- https://checkstyle.org/filters/suppressionxpathfilter.html -->
<!--        Фильтр для подавления определенных проверок.-->
        <module name="SuppressionXpathFilter">
            <property name="file" value="${org.checkstyle.google.suppressionxpathfilter.config}"
                      default="checkstyle-xpath-suppressions.xml" />
            <property name="optional" value="true"/>
        </module>
<!--        Держатель для аннотаций SuppressWarnings.-->
        <module name="SuppressWarningsHolder" />
        <!--        Позволяет подавлять проверки с помощью комментариев.-->
        <module name="SuppressionCommentFilter">
            <property name="offCommentFormat" value="CHECKSTYLE.OFF\: ([\w\|]+)" />
            <property name="onCommentFormat" value="CHECKSTYLE.ON\: ([\w\|]+)" />
            <property name="checkFormat" value="$1" />
        </module>
<!--        Подавляет проверки на основе соседних комментариев.-->
        <module name="SuppressWithNearbyCommentFilter">
            <property name="commentFormat" value="CHECKSTYLE.SUPPRESS\: ([\w\|]+)"/>
            <!-- $1 refers to the first match group in the regex defined in commentFormat -->
            <property name="checkFormat" value="$1"/>
            <!-- The check is suppressed in the next line of code after the comment -->
            <property name="influenceFormat" value="1"/>
        </module>
    </module>
</module>